import React, { useState } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import { Container, Row, Col, Form, Button } from 'react-bootstrap';
import { useSelector } from 'react-redux';

const CreateQueryPage = () => {
  const navigate = useNavigate();
  const location = useLocation();
  const { id: taskId, name: taskTitle } = location.state || {}; // Get taskId and taskTitle from navigation state

  const [queryDescription, setQueryDescription] = useState('');
  const [queryTitle, setQueryTitle] = useState('');
  const [error, setError] = useState('');
  const [isSubmitted, setIsSubmitted] = useState(false); // New state to manage submission status
  
  // Retrieve the necessary data from the Redux store
  const obj = useSelector(state => state.myobj.obj); // Adjust according to your state structure
  const empId = obj?.id || 0;
  const userRole = obj?.login?.role?.role1 || 'User'; // Default to 'User' if role is not found

  // Function to format date as dd/mm/yyyy hh:mm:ss
  const formatDate = (date) => {
    const day = date.getDate().toString().padStart(2, '0');
    const month = (date.getMonth() + 1).toString().padStart(2, '0'); // Months are zero-based
    const year = date.getFullYear();
    const hours = date.getHours().toString().padStart(2, '0');
    const minutes = date.getMinutes().toString().padStart(2, '0');
    const seconds = date.getSeconds().toString().padStart(2, '0');
    return `${day}/${month}/${year} ${hours}:${minutes}:${seconds}`;
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (!queryTitle.trim()) {
      setError('Query Title is required');
      return;
    }

    if (!queryDescription.trim()) {
      setError('Query Description is required');
      return;
    }

    const newQuery = {
      qid: 0, // Typically, the qid will be auto-generated by the database
      title: queryTitle,
      createdDate: formatDate(new Date()), // Format the current date
      queryText: queryDescription,
      raisedBy: empId,
      status: 'pending',
      taskId: taskId
    };

    console.log('Query Object:', newQuery); // Log the query object to the console
//giving call to spring Api to create query
    fetch('http://localhost:8080/api/queries', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(newQuery),
    })
      .then(response => {
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        return response.json();
      })
      .then(data => {
        console.log('Success:', data);
        setQueryDescription('');
        setQueryTitle('');
        setError('');
        setIsSubmitted(true);
      })
      .catch((error) => {
        console.error('Error:', error);
        setError('Failed to create query');
      });
    // Clear the form
    setQueryDescription('');
    setQueryTitle('');
    setError('');
    setIsSubmitted(true); // Set submission status to true

    // Optionally navigate or perform other actions
    // navigate(`/${userRole}`); // Uncomment if navigation is needed immediately
  };

  return (
    <div className="bg-dark text-black min-vh-100 p-0">
      <Container fluid>
        <div style={{ paddingTop: '90px' }}>
          <Row className="justify-content-center mt-5">
            <Col md={6}>
              {!isSubmitted ? (
                <div className="bg-secondary p-4 rounded">
                  <h2 className="text-center mb-4">Create Query for Task: {taskTitle}</h2>
                  <Form onSubmit={handleSubmit}>
                    <Form.Group controlId="queryTitle">
                      <Form.Label>Query Title</Form.Label>
                      <Form.Control
                        type="text"
                        value={queryTitle}
                        onChange={(e) => setQueryTitle(e.target.value)}
                        style={{ height: '40px' }}
                      />
                    </Form.Group>
                    <Form.Group controlId="queryDescription">
                      <Form.Label>Query Description</Form.Label>
                      <Form.Control
                        as="textarea"
                        rows={4}
                        value={queryDescription}
                        onChange={(e) => setQueryDescription(e.target.value)}
                      />
                    </Form.Group>
                    {error && <p className="text-info"><b>{error}</b></p>}
                    <Button variant="primary" type="submit" className="mt-3">Submit</Button>
                  </Form>
                </div>
              ) : (
                <div className="bg-success p-4 rounded text-center">
                  <h2>Query Created Successfully!</h2>
                  <Button 
                    variant="primary" 
                    onClick={() => navigate(`/${userRole}`)}
                    className="mt-3"
                  >
                    Go to Dashboard
                  </Button>
                </div>
              )}
            </Col>
          </Row>
        </div>
      </Container>
    </div>
  );
};

export default CreateQueryPage;
